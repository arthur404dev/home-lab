version: "3.7"

### -> NETWORKS
networks:
  traefik_proxy:
    external: true
  nextcloud:
    driver: bridge
  default:
    driver: bridge

### -> EXTENSION FIELDS

## CORE SERVICES ##
# Keys common to core services
x-common-keys-core:
  &common-keys-core
  networks:
    - traefik_proxy
  security_opt:
    - no-new-privileges:true
  restart: always
  profiles:
    - core

# Keys common to core services without access to proxy network
x-common-keys-core-isolated:
  &common-keys-core-isolated
  security_opt:
    - no-new-privileges:true
  restart: always
  profiles:
    - core

## APPS ##
# Keys common to some of the dependent services/apps
x-common-keys-apps:
  &common-keys-apps
  networks:
    - traefik_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
  profiles:
    - apps

# Keys common to isolated services/apps without access to proxy network
x-common-keys-apps-isolated:
  &common-keys-apps-isolated
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
  profiles:
    - apps

## DOWNLOADERS ##
# Keys common to some of the dependent downloaders
x-common-keys-downloaders:
  &common-keys-downloaders
  networks:
    - traefik_proxy
  security_opt:
    - no-new-privileges:true
  restart: unless-stopped
  profiles:
    - downloaders

## MEDIA ##
# Keys common to media services
x-common-keys-media:
  &common-keys-media
  networks:
    - traefik_proxy
  security_opt:
    - no-new-privileges:true
  restart: "no"
  profiles:
    - media

# Keys common to media services without access to proxy network
x-common-keys-media-isolated:
  &common-keys-media-isolated
  security_opt:
    - no-new-privileges:true
  restart: "no"
  profiles:
    - media

### -> SERVICES
services:
  ## CORE SERVICES ##
  # -> Traefik - Reverse proxy
  traefik:
    <<: *common-keys-core
    container_name: traefik
    image: traefik:latest
    restart: unless-stopped
    command:
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      - --entryPoints.secure.address=:9999
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=$CLOUDFLARE_IPS,$LOCAL_IPS
      - --entryPoints.traefik.address=:8080
      # - --entryPoints.ping.address=:8081
      - --api=true
      # - --api.insecure=true
      - --api.dashboard=true
      #- --ping=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      # - --log.filePath=/logs/traefik.log
      - --log.level=INFO # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/logs/access.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=204-299,400-499,500-599
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock # Use Docker Socket Proxy instead for improved security
      # - --providers.docker.endpoint=tcp://socket-proxy:2375
      # Automatically set Host rule for services
      # - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME_CLOUD_SERVER`)
      - --providers.docker.exposedByDefault=false
      # - --entrypoints.https.http.middlewares=chain-oauth@file
      - --entrypoints.https.http.tls.options=tls-opts@file
      # Add dns-cloudflare as default certresolver for all services. Also enables TLS and no need to specify on individual services
      - --entrypoints.https.http.tls.certresolver=dns-cloudflare
      - --entrypoints.https.http.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER
      - --entrypoints.https.http.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER
      # - --entrypoints.https.http.tls.domains[1].main=$DOMAINNAME2 # Pulls main cert for second domain
      # - --entrypoints.https.http.tls.domains[1].sans=*.$DOMAINNAME2 # Pulls wildcard cert for second domain
      - --providers.docker.network=traefik_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.resolvers=1.1.1.1:53,1.0.0.1:53
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.delayBeforeCheck=90 # To delay DNS check and reduce LE hitrate
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.254
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 9999
        published: 9999
        protocol: tcp
        mode: host
      # - target: 8080
      #   published: 8080
      #   protocol: tcp
      #   mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/appdata/traefik2/rules:/rules
      - $DOCKERDIR/appdata/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/appdata/traefik2/logs:/logs
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
      - PUID=$PUID
      - PGID=$PGID
      - DOMAINNAME_CLOUD_SERVER
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  # -> Traefik-Forward-Auth - Google Oauth forwarder to enable oauth middleware on Traefik
  oauth:
    <<: *common-keys-core
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME_CLOUD_SERVER
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME_CLOUD_SERVER
      - URL_PATH=/_oauth
      - WHITELIST=$WHITELISTED_OAUTH_EMAILS
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"

  # -> Portainer - For Docker container management
  portainer:
    <<: *common-keys-core
    container_name: portainer
    image: portainer/portainer:latest
    # ports:
    #   - 9000:9000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/appdata/portainer/data:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      #      - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      #      - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # -> Cloudflare Companion - Automatic CNAME DNS Creation
  cf-companion:
    <<: *common-keys-core
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      TIMEZONE: $TZ
      TRAEFIK_VERSION: 2
      CF_EMAIL: $CLOUDFLARE_EMAIL # Same as traefik
      CF_TOKEN: $CLOUDFLARE_API_KEY # Same as traefik
      TARGET_DOMAIN: $DOMAINNAME_CLOUD_SERVER
      DOMAIN1: $DOMAINNAME_CLOUD_SERVER
      DOMAIN1_ZONE_ID: $CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      DOMAIN1_PROXIED: TRUE
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`pihole.$DOMAINNAME_CLOUD_SERVER`) || HostHeader(`proxmox.$DOMAINNAME_CLOUD_SERVER`) || HostHeader(`truenas.$DOMAINNAME_CLOUD_SERVER`)"

  ## CLOUD APPS ##
  # -> Homarr - Main Dashboard for services
  homarr:
    <<: *common-keys-apps
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    volumes:
      - $DOCKERDIR/appdata/homarr/data/configs:/app/data/configs
      - $DOCKERDIR/appdata/homarr/data/icons:/app/public/icons
      - $DOCKERDIR/appdata/homarr/data/img:/app/public/img
      - /var/run/docker.sock:/var/run/docker.sock:ro
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homarr-rtr.entrypoints=https"
      - "traefik.http.routers.homarr-rtr.rule=Host(`home.$DOMAINNAME_CLOUD_SERVER`,`homarr.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.homarr-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.homarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.homarr-rtr.service=homarr-svc"
      - "traefik.http.services.homarr-svc.loadbalancer.server.port=7575"

  # -> NextCloud - Personal Cloud
  nextcloud:
    <<: *common-keys-apps
    container_name: nextcloud
    image: nextcloud
    volumes:
      - $NFS_HDD/docker/nextcloud/data:/var/www/html/data
      - $DOCKERDIR/appdata/nextcloud/data/config:/var/www/html/config
      - $DOCKERDIR/appdata/nextcloud/data/custom_apps:/var/www/html/custom_apps
      - $DOCKERDIR/appdata/nextcloud/data/themes:/var/www/html/themes
    networks:
      - nextcloud
    links:
      - mariadb
    environment:
      MYSQL_USER: mariadb
      MYSQL_DATABASE: mariadb
      MYSQL_ROOT_PASSWORD: $DB_PASSWORD_ROOT
      MYSQL_PASSWORD: mariadb
      MYSQL_HOST: mariadb
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-no-auth@file,nextcloud-dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.regex=^/.well-known/ca(l|rd)dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.replacement=/remote.php/dav/"
      ## HTTP Services
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"

  # -> Nextcloud Database - Using MariaDB, but can also use MySQL or PostgreSQL
  mariadb:
    <<: *common-keys-apps-isolated
    container_name: mariadb
    image: mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    networks:
      - nextcloud
    volumes:
      - $DOCKERDIR/appdata/nextcloud/db:/var/lib/mysql
    environment:
      MYSQL_USER: mariadb
      MYSQL_DATABASE: mariadb
      MYSQL_ROOT_PASSWORD: $DB_PASSWORD_ROOT
      MYSQL_PASSWORD: mariadb

  # -> Jellyfin - Mediaserver
  jellyfin:
    <<: *common-keys-apps-isolated
    container_name: 'jellyfin'
    image: jellyfin/jellyfin
    user: $PUID:$PGID
    group_add:
      # by id as these may not exist within the container. Needed to provide permissions to the VAAPI Devices
      - '107' #render
      - '44' #video
    # # Network mode of 'host' exposes the ports on the host. This is needed for DLNA access.
    network_mode: 'host'
    volumes:
      - $DOCKERDIR/appdata/jellyfin/config:/config
      - $DOCKERDIR/appdata/jellyfin/cache:/cache
      # Update this configuration as desired
      - $MEDIADIR/media:/media
    devices:
      # VAAPI Devices
      # - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    labels:
      - 'traefik.enable=true'
      ## HTTP Router
      - 'traefik.http.routers.jellyfin.entryPoints=secure'
      - 'traefik.http.routers.jellyfin.rule=Host(`jellyfin.$DOMAINNAME_CLOUD_SERVER`)'
      ## TLS config
      - 'traefik.http.routers.jellyfin.tls=true'
      - 'traefik.http.routers.jellyfin.tls.domains=jellyfin.$DOMAINNAME_CLOUD_SERVER'
      ## Middleware
      - 'traefik.http.routers.jellyfin.middlewares=jellyfin-mw'
      - 'traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLHost=jellyfin.$DOMAINNAME_CLOUD_SERVER:9999'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.browserXSSFilter=true'
      - "traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://$DOMAINNAME_CLOUD_SERVER'"
      ## HTTP Service
      - 'traefik.http.routers.jellyfin.service=jellyfin-svc@file'
      - 'traefik.http.services.jellyfin-svc.loadBalancer.server.port=8096'
      - 'traefik.http.services.jellyfin-svc.loadBalancer.passHostHeader=true'
      ## Redirection of HTTP on port 9999 to HTTPS on port 9999 (consistent protocol)
      - 'traefik.http.routers.jellyfin-insecure.entryPoints=secure'
      - 'traefik.http.routers.jellyfin-insecure.rule=Host(`jellyfin.$DOMAINNAME_CLOUD_SERVER`)'
      - 'traefik.http.routers.jellyfin-insecure.middlewares=jellyfin-insecure-mw'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.scheme=https'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.port=9999'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.permanent=false'
      - 'traefik.http.routers.jellyfin-insecure.service=noop@internal'

  ## DOWNLOADERS ##
  # jDownloader - Download management
  jdownloader:
    <<: *common-keys-downloaders
    image: jlesage/jdownloader-2:latest
    container_name: jdownloader
    ports:
      - "$PORT_JDOWN:5800"
    volumes:
      - $MEDIADIR/downloads:/data/downloads
      - $DOCKERDIR/appdata/jdownloader:/config
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
      UMASK: 2
      KEEP_APP_RUNNING: 1
      CLEAN_TMP_DIR: 1
      DISPLAY_WIDTH: 1600
      DISPLAY_HEIGHT: 960
      VNC_PASSWORD: $JDOWN_VNC_PASSWD
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.jdownloader-rtr.entrypoints=https"
      - "traefik.http.routers.jdownloader-rtr.rule=Host(`jdown.$DOMAINNAME_CLOUD_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.jdownloader-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.jdownloader-rtr.service=jdownloader-svc"
      - "traefik.http.services.jdownloader-svc.loadbalancer.server.port=5800"

  # TransmissionBT - Torrent VPN Downloader
  transmission-vpn:
    <<: *common-keys-downloaders
    image: haugene/transmission-openvpn:latest
    container_name: transmission-vpn
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.169
    ports:
      - "$PORT_TRANS:9091"
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    # dns:
    #   - 1.1.1.1
    #   - 1.0.0.1
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DOCKERDIR/appdata/transmission-vpn/data:/data
      - $DOCKERDIR/appdata/transmission-vpn/config:/config
      - $MEDIADIR/downloads:/data/downloads
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
      OPENVPN_PROVIDER: NORDVPN
      OPENVPN_USERNAME: $NORD_USERNAME
      OPENVPN_PASSWORD: $NORD_PASSWORD
      NORDVPN_COUNTRY: BR
      NORDVPN_PROTOCOL: tcp
      NORDVPN_CATEGORY: legacy_p2p
      LOCAL_NETWORK: "$LOCAL_NETWORK"
      UMASK_SET: 2
      # These transmission settings are not needed as /data/transmission-home/settings.json is persistent
      TRANSMISSION_RPC_AUTHENTICATION_REQUIRED: "true"
      TRANSMISSION_RPC_HOST_WHITELIST: "127.0.0.1,$SERVER_IP"
      TRANSMISSION_RPC_PASSWORD: $TRANSMISSION_RPC_PASSWORD
      TRANSMISSION_RPC_USERNAME: $TRANSMISSION_RPC_USERNAME
      TRANSMISSION_UMASK: 2
      TRANSMISSION_RATIO_LIMIT: 1.0
      TRANSMISSION_RATIO_LIMIT_ENABLED: "true"
      TRANSMISSION_ALT_SPEED_DOWN: 2000
      TRANSMISSION_ALT_SPEED_ENABLED: "false"
      TRANSMISSION_ALT_SPEED_UP: 100
      TRANSMISSION_SPEED_LIMIT_DOWN: 10000
      TRANSMISSION_SPEED_LIMIT_DOWN_ENABLED: "true"
      TRANSMISSION_SPEED_LIMIT_UP: 500
      TRANSMISSION_SPEED_LIMIT_UP_ENABLED: "true"
      TRANSMISSION_INCOMPLETE_DIR: /data/downloads/torrents/incomplete
      TRANSMISSION_INCOMPLETE_DIR_ENABLED: "true"
      TRANSMISSION_WATCH_DIR: /data/downloads/torrents
      TRANSMISSION_WATCH_DIR_ENABLED: "true"
      TRANSMISSION_DOWNLOAD_DIR: /data/downloads/torrents
      LOG_TO_STDOUT: "true"
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.transmission-vpn-rtr.entrypoints=https"
      - "traefik.http.routers.transmission-vpn-rtr.rule=Host(`trans.$DOMAINNAME_CLOUD_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.transmission-vpn-rtr.middlewares=middlewares-rate-limit@file"
      ## HTTP Services
      - "traefik.http.routers.transmission-vpn-rtr.service=transmission-vpn-svc"
      - "traefik.http.services.transmission-vpn-svc.loadbalancer.server.port=9091"

  # qBittorrent - Torrent downloader
  qbittorrent:
    <<: *common-keys-downloaders
    image: lscr.io/linuxserver/qbittorrent:latest
    container_name: qbittorrent
    network_mode: container:transmission-vpn
    ports:
      - "$PORT_QBIT:8080"
    volumes:
      - $DOCKERDIR/appdata/qbittorrent/config:/config
      - $MEDIADIR/downloads:/data/downloads
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
      UMASK_SET: 2
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.qbittorrent-rtr.entrypoints=https"
      - "traefik.http.routers.qbittorrent-rtr.rule=Host(`qbit.$DOMAINNAME_CLOUD_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.qbittorrent-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbittorrent-rtr.service=qbittorrent-svc"
      - "traefik.http.services.qbittorrent-svc.loadbalancer.server.port=8080"

  # nzbget - Binary newsgrabber (NZB downloader)
  nzbget:
    <<: *common-keys-downloaders
    image: lscr.io/linuxserver/nzbget
    container_name: nzbget
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.216
    ports:
      - "$PORT_NZBGET:6789"
    volumes:
      - $DOCKERDIR/appdata/nzbget/config:/config
      - $MEDIADIR/downloads:/data/downloads
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.nzbget-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.nzbget-rtr.entrypoints=https"
      - "traefik.http.routers.nzbget-rtr.rule=Host(`nzbget.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.nzbget-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.nzbget-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.nzbget-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.nzbget-rtr.service=nzbget-svc"
      - "traefik.http.routers.nzbget-rtr-bypass.service=nzbget-svc"
      - "traefik.http.services.nzbget-svc.loadbalancer.server.port=6789"

  ## MEDIA ##
  # Prowlarr - Torrent proxy
  prowlarr:
    <<: *common-keys-media
    image: ghcr.io/linuxserver/prowlarr:develop
    container_name: prowlarr
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.162
    ports:
      - "$PORT_PROWLARR:9696"
    volumes:
      - $DOCKERDIR/appdata/prowlarr/config:/config
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.prowlarr-rtr.entrypoints=https"
      - "traefik.http.routers.prowlarr-rtr.rule=Host(`prowlarr.$DOMAINNAME_CLOUD_SERVER`)"
      ## Middlewares
      - "traefik.http.routers.prowlarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.prowlarr-rtr.service=prowlarr-svc"
      - "traefik.http.services.prowlarr-svc.loadbalancer.server.port=9696"

  # Radarr - Movie management
  radarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/radarr:nightly # latest was causing "Error parsing column 45"
    container_name: radarr
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.164
    ports:
      - "$PORT_RADARR:7878"
    volumes:
      - $DOCKERDIR/appdata/radarr/config:/config
      - $MEDIADIR/temp/appdata/radarr/MediaCover:/config/MediaCover
      - $MEDIADIR:/data
      - $MEDIADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.radarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.radarr-rtr-bypass.rule=Host(`radarr.$DOMAINNAME_CLOUD_SERVER`) && (Headers(`X-Api-Key`, `$API_KEY_RADARR`) || Query(`apikey`, `$API_KEY_RADARR`))"
      #- "traefik.http.routers.radarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.radarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.radarr-rtr.entrypoints=https"
      - "traefik.http.routers.radarr-rtr.rule=Host(`radarr.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.radarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.radarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.radarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.radarr-rtr.service=radarr-svc"
      - "traefik.http.routers.radarr-rtr-bypass.service=radarr-svc"
      - "traefik.http.services.radarr-svc.loadbalancer.server.port=7878"

  # Sonarr - TV Shows management
  sonarr:
    <<: *common-keys-media
    image: lscr.io/linuxserver/sonarr
    container_name: sonarr
    networks:
      traefik_proxy:
        ipv4_address: 192.168.90.167
    ports:
      - "$PORT_SONARR:8989"
    volumes:
      - $DOCKERDIR/appdata/sonarr:/config
      - $MEDIADIR/temp/appdata/sonarr/MediaCover:/config/MediaCover
      - $MEDIADIR:/data
      - $MEDIADIR/downloads/torrents:/data/downloads/torrents
      - "/etc/localtime:/etc/localtime:ro"
    environment:
      USER_ID: $PUID
      GROUP_ID: $PGID
      TZ: $TZ
    labels:
      - "traefik.enable=true"
      ## HTTP Routers Auth Bypass
      - "traefik.http.routers.sonarr-rtr-bypass.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr-bypass.rule=Host(`sonarr.$DOMAINNAME_CLOUD_SERVER`) && (Headers(`X-Api-Key`, `$API_KEY_SONARR`) || Query(`apikey`, `$API_KEY_SONARR`))"
      #- "traefik.http.routers.sonarr-rtr-bypass.rule=Headers(`traefik-auth-bypass-key`, `$TRAEFIK_AUTH_BYPASS_KEY`)" # Bypass Auth for LunaSea on iOS
      - "traefik.http.routers.sonarr-rtr-bypass.priority=100"
      ## HTTP Routers Auth
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.sonarr-rtr.priority=99"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr-bypass.middlewares=chain-no-auth@file"
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.routers.sonarr-rtr-bypass.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
