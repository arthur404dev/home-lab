version: "3.7"

### -> NETWORKS
networks:
  traefik_proxy:
    external: true
  nextcloud:
    driver: bridge
  default:
    driver: bridge

services:
  ### -> SERVICES

  # -> Traefik - Reverse proxy
  traefik:
    container_name: traefik
    image: traefik:2.2.1
    restart: unless-stopped
    command:
      # CLI arguments
      - --global.checkNewVersion=true
      - --global.sendAnonymousUsage=true
      - --entryPoints.http.address=:80
      - --entryPoints.https.address=:443
      # Allow these IPs to set the X-Forwarded-* headers - Cloudflare IPs: https://www.cloudflare.com/ips/
      - --entrypoints.https.forwardedHeaders.trustedIPs=173.245.48.0/20,103.21.244.0/22,103.22.200.0/22,103.31.4.0/22,141.101.64.0/18,108.162.192.0/18,190.93.240.0/20,188.114.96.0/20,197.234.240.0/22,198.41.128.0/17,162.158.0.0/15,104.16.0.0/12,172.64.0.0/13,131.0.72.0/22
      - --entryPoints.traefik.address=:8080
      - --api=true
      # - --api.insecure=true
      # - --serversTransport.insecureSkipVerify=true
      - --log=true
      - --log.level=DEBUG # (Default: error) DEBUG, INFO, WARN, ERROR, FATAL, PANIC
      - --accessLog=true
      - --accessLog.filePath=/traefik.log
      - --accessLog.bufferingSize=100 # Configuring a buffer of 100 lines
      - --accessLog.filters.statusCodes=400-499
      - --providers.docker=true
      - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.defaultrule=Host(`{{ index .Labels "com.docker.compose.service" }}.$DOMAINNAME_CLOUD_SERVER`)
      - --providers.docker.exposedByDefault=false
      - --providers.docker.network=traefik_proxy
      - --providers.docker.swarmMode=false
      - --providers.file.directory=/rules # Load dynamic configuration from one or more .toml or .yml files in a directory.
      # - --providers.file.filename=/path/to/file # Load dynamic configuration from a file.
      - --providers.file.watch=true # Only works on top level files in the rules folder
      # - --certificatesResolvers.dns-cloudflare.acme.caServer=https://acme-staging-v02.api.letsencrypt.org/directory # LetsEncrypt Staging Server - uncomment when testing
      - --certificatesResolvers.dns-cloudflare.acme.email=$CLOUDFLARE_EMAIL
      - --certificatesResolvers.dns-cloudflare.acme.storage=/acme.json
      - --certificatesResolvers.dns-cloudflare.acme.dnsChallenge.provider=cloudflare
    networks:
      - traefik_proxy
    security_opt:
      - no-new-privileges:true
    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      - target: 8080
        published: 8080
        protocol: tcp
        mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/traefik2/rules:/rules
      - $DOCKERDIR/traefik2/acme/acme.json:/acme.json
      - $DOCKERDIR/traefik2/traefik.log:/traefik.log
      - $DOCKERDIR/shared:/shared
    environment:
      - CF_API_EMAIL=$CLOUDFLARE_EMAIL
      - CF_API_KEY=$CLOUDFLARE_API_KEY
      - PUID=$PUID
      - PGID=$PGID
    labels:
      - "traefik.enable=true"
      # HTTP-to-HTTPS Redirect
      - "traefik.http.routers.http-catchall.entrypoints=http"
      - "traefik.http.routers.http-catchall.rule=HostRegexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      # HTTP Routers
      - "traefik.http.routers.traefik-rtr.entrypoints=https"
      - "traefik.http.routers.traefik-rtr.rule=Host(`traefik.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.traefik-rtr.tls=true"
      # - "traefik.http.routers.traefik-rtr.tls.certresolver=dns-cloudflare" # Comment out this line after first run of traefik to force the use of wildcard certs
      - "traefik.http.routers.traefik-rtr.tls.domains[0].main=$DOMAINNAME_CLOUD_SERVER"
      - "traefik.http.routers.traefik-rtr.tls.domains[0].sans=*.$DOMAINNAME_CLOUD_SERVER"
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].main=$SECONDDOMAINNAME" # Pulls main cert for second domain
      # - "traefik.http.routers.traefik-rtr.tls.domains[1].sans=*.$SECONDDOMAINNAME" # Pulls wildcard cert for second domain
      ## Services - API
      - "traefik.http.routers.traefik-rtr.service=api@internal"
      ## Middlewares
      - "traefik.http.routers.traefik-rtr.middlewares=chain-oauth@file"

  # -> Traefik-Forward-Auth - Google Oauth forwarder to enable oauth middleware on Traefik
  oauth:
    container_name: oauth
    image: thomseddon/traefik-forward-auth:latest
    restart: unless-stopped
    networks:
      - traefik_proxy
    security_opt:
      - no-new-privileges:true
    environment:
      - CLIENT_ID=$GOOGLE_CLIENT_ID
      - CLIENT_SECRET=$GOOGLE_CLIENT_SECRET
      - SECRET=$OAUTH_SECRET
      - COOKIE_DOMAIN=$DOMAINNAME_CLOUD_SERVER
      - INSECURE_COOKIE=false
      - AUTH_HOST=oauth.$DOMAINNAME_CLOUD_SERVER
      - URL_PATH=/_oauth
      - WHITELIST=$OAUTH_EMAIL_1,$OAUTH_EMAIL_2
      - LOG_LEVEL=info
      - LOG_FORMAT=text
      - LIFETIME=2592000 # 30 days
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.oauth-rtr.entrypoints=https"
      - "traefik.http.routers.oauth-rtr.rule=Host(`oauth.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.oauth-rtr.tls=true"
      ## HTTP Services
      - "traefik.http.routers.oauth-rtr.service=oauth-svc"
      - "traefik.http.services.oauth-svc.loadbalancer.server.port=4181"
      ## Middlewares
      - "traefik.http.routers.oauth-rtr.middlewares=chain-oauth@file"

  # -> Portainer - For Docker container management
  portainer:
    container_name: portainer
    image: portainer/portainer:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    # ports:
    #   - 9000:9000
    networks:
      - traefik_proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DOCKERDIR/portainer/data:/data
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.portainer-rtr.entrypoints=https"
      - "traefik.http.routers.portainer-rtr.rule=Host(`portainer.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.portainer-rtr.tls=true"
      ## Middlewares
      #      - "traefik.http.routers.portainer-rtr.middlewares=chain-no-auth@file" # No Authentication
      #      - "traefik.http.routers.portainer-rtr.middlewares=chain-basic-auth@file" # Basic Authentication
      - "traefik.http.routers.portainer-rtr.middlewares=chain-oauth@file" # Google OAuth 2.0
      ## HTTP Services
      - "traefik.http.routers.portainer-rtr.service=portainer-svc"
      - "traefik.http.services.portainer-svc.loadbalancer.server.port=9000"

  # -> Homarr - Main Dashboard for services
  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - $DOCKERDIR/homarr/data/configs:/app/data/configs
      - $DOCKERDIR/homarr/data/icons:/app/public/icons
      - $DOCKERDIR/homarr/data/img:/app/public/img
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homarr-rtr.entrypoints=https"
      - "traefik.http.routers.homarr-rtr.rule=Host(`home.$DOMAINNAME_CLOUD_SERVER`,`homarr.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.homarr-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.homarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.homarr-rtr.service=homarr-svc"
      - "traefik.http.services.homarr-svc.loadbalancer.server.port=7575"

  # -> Cloudflare Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - CF_EMAIL=$CLOUDFLARE_EMAIL # Same as traefik
      - CF_TOKEN=$CLOUDFLARE_API_KEY # Same as traefik
      - TARGET_DOMAIN=$DOMAINNAME_CLOUD_SERVER
      - DOMAIN1=$DOMAINNAME_CLOUD_SERVER
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`pihole.$DOMAINNAME_CLOUD_SERVER`) || HostHeader(`proxmox.$DOMAINNAME_CLOUD_SERVER`) || HostHeader(`truenas.$DOMAINNAME_CLOUD_SERVER`)"
  # -> NextCloud - Personal Cloud
  nextcloud:
    container_name: nextcloud
    image: nextcloud
    restart: unless-stopped
    volumes:
      - $NFS_HDD/docker/nextcloud/data:/var/www/html/data
      - $DOCKERDIR/nextcloud/data/config:/var/www/html/config
      - $DOCKERDIR/nextcloud/data/custom_apps:/var/www/html/custom_apps
      - $DOCKERDIR/nextcloud/data/themes:/var/www/html/themes
    networks:
      - traefik_proxy
      - nextcloud
    links:
      - mariadb
    environment:
      - MYSQL_USER=mariadb
      - MYSQL_DATABASE=mariadb
      - MYSQL_ROOT_PASSWORD=$DB_PASSWORD_ROOT
      - MYSQL_PASSWORD=mariadb
      - MYSQL_HOST=mariadb
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-no-auth@file,nextcloud-dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.regex=^/.well-known/ca(l|rd)dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.replacement=/remote.php/dav/"
      ## HTTP Services
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"
  # -> Nextcloud Database - Using MariaDB, but can also use MySQL or PostgreSQL
  mariadb:
    container_name: mariadb
    image: mariadb
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    networks:
      - nextcloud
    volumes:
      - $DOCKERDIR/nextcloud/db:/var/lib/mysql
    environment:
      MYSQL_USER: mariadb
      MYSQL_DATABASE: mariadb
      MYSQL_ROOT_PASSWORD: $DB_PASSWORD_ROOT
      MYSQL_PASSWORD: mariadb
  # -> Jellyfin - Mediaserver
  jellyfin:
    container_name: 'jellyfin'
    image: jellyfin/jellyfin
    user: $PUID:$PGID
    group_add:
      # by id as these may not exist within the container. Needed to provide permissions to the VAAPI Devices
      - '107' #render
      - '44' #video
    # Network mode of 'host' exposes the ports on the host. This is needed for DLNA access.
    network_mode: 'host'
    volumes:
      - $DOCKERDIR/jellyfin/config:/config
      - $DOCKERDIR/jellyfin/cache:/cache
      # Update this configuration as desired
      - $MEDIADIR:/media
    restart: always
    devices:
      # VAAPI Devices
      # - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.jellyfin-rtr.entryPoints=https'
      - 'traefik.http.routers.jellyfin-rtr.rule=Host(`jellyfin.$DOMAINNAME_CLOUD_SERVER`)'
      - 'traefik.http.routers.jellyfin-rtr.tls=true'
      - 'traefik.http.routers.jellyfin-rtr.middlewares=jellyfin-mw'
      - 'traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLHost=jellyfin.$DOMAINNAME_CLOUD_SERVER'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.browserXSSFilter=true'
      - "traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://$DOMAINNAME_CLOUD_SERVER'"
      - 'traefik.http.routers.jellyfin-rtr.service=jellyfin-svc@file'
      - 'traefik.http.services.jellyfin-svc.loadBalancer.server.port=8096'
      - 'traefik.http.services.jellyfin-svc.loadBalancer.passHostHeader=true'
      - 'traefik.http.routers.jellyfin-insecure-rtr.entryPoints=https'
      - 'traefik.http.routers.jellyfin-insecure-rtr.rule=Host(`jellyfin.$DOMAINNAME_CLOUD_SERVER`)'
      - 'traefik.http.routers.jellyfin-insecure-rtr.middlewares=jellyfin-insecure-mw'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.scheme=https'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.port=9999'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.permanent=false'
      - 'traefik.http.routers.jellyfin-insecure-rtr.service=noop@internal'
