version: "3.7"

### -> NETWORKS
networks:
  traefik_proxy:
    external: true
  nextcloud:
    driver: bridge
  default:
    driver: bridge
  internal:
    driver: overlay
    ipam:
      config:
        - subnet: 172.16.11.0/24

services:
  ### -> SERVICES

  # -> Homarr - Main Dashboard for services
  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: unless-stopped
    volumes:
      - $DOCKERDIR/homarr/data/configs:/app/data/configs
      - $DOCKERDIR/homarr/data/icons:/app/public/icons
      - $DOCKERDIR/homarr/data/img:/app/public/img
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.homarr-rtr.entrypoints=https"
      - "traefik.http.routers.homarr-rtr.rule=Host(`home.$DOMAINNAME_CLOUD_SERVER`,`homarr.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.homarr-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.homarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.homarr-rtr.service=homarr-svc"
      - "traefik.http.services.homarr-svc.loadbalancer.server.port=7575"

  # -> Cloudflare Companion - Automatic CNAME DNS Creation
  cf-companion:
    container_name: cf-companion
    image: tiredofit/traefik-cloudflare-companion:latest
    restart: always
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TIMEZONE=$TZ
      - TRAEFIK_VERSION=2
      - CF_EMAIL=$CLOUDFLARE_EMAIL # Same as traefik
      - CF_TOKEN=$CLOUDFLARE_API_KEY # Same as traefik
      - TARGET_DOMAIN=$DOMAINNAME_CLOUD_SERVER
      - DOMAIN1=$DOMAINNAME_CLOUD_SERVER
      - DOMAIN1_ZONE_ID=$CLOUDFLARE_ZONEID # Copy from Cloudflare Overview page
      - DOMAIN1_PROXIED=TRUE
    labels:
      # Add hosts specified in rules here to force cf-companion to create the CNAMEs
      # Since cf-companion creates CNAMEs based on host rules, this a workaround for non-docker/external apps
      - "traefik.http.routers.cf-companion-rtr.rule=HostHeader(`pihole.$DOMAINNAME_CLOUD_SERVER`) || HostHeader(`proxmox.$DOMAINNAME_CLOUD_SERVER`) || HostHeader(`truenas.$DOMAINNAME_CLOUD_SERVER`)"
  # -> NextCloud - Personal Cloud
  nextcloud:
    container_name: nextcloud
    image: nextcloud
    restart: unless-stopped
    volumes:
      - $NFS_HDD/docker/nextcloud/data:/var/www/html/data
      - $DOCKERDIR/nextcloud/data/config:/var/www/html/config
      - $DOCKERDIR/nextcloud/data/custom_apps:/var/www/html/custom_apps
      - $DOCKERDIR/nextcloud/data/themes:/var/www/html/themes
    networks:
      - traefik_proxy
      - nextcloud
    links:
      - mariadb
    environment:
      - MYSQL_USER=mariadb
      - MYSQL_DATABASE=mariadb
      - MYSQL_ROOT_PASSWORD=$DB_PASSWORD_ROOT
      - MYSQL_PASSWORD=mariadb
      - MYSQL_HOST=mariadb
    labels:
      - "traefik.enable=true"
      ## HTTP Routers
      - "traefik.http.routers.nextcloud-rtr.entrypoints=https"
      - "traefik.http.routers.nextcloud-rtr.rule=Host(`nextcloud.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.nextcloud-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.nextcloud-rtr.middlewares=chain-no-auth@file,nextcloud-dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.regex=^/.well-known/ca(l|rd)dav"
      - "traefik.http.middlewares.nextcloud-dav.replacepathregex.replacement=/remote.php/dav/"
      ## HTTP Services
      - "traefik.http.routers.nextcloud-rtr.service=nextcloud-svc"
      - "traefik.http.services.nextcloud-svc.loadbalancer.server.port=80"
  # -> Nextcloud Database - Using MariaDB, but can also use MySQL or PostgreSQL
  mariadb:
    container_name: mariadb
    image: mariadb
    restart: unless-stopped
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    networks:
      - nextcloud
    volumes:
      - $DOCKERDIR/nextcloud/db:/var/lib/mysql
    environment:
      MYSQL_USER: mariadb
      MYSQL_DATABASE: mariadb
      MYSQL_ROOT_PASSWORD: $DB_PASSWORD_ROOT
      MYSQL_PASSWORD: mariadb
  # -> Jellyfin - Mediaserver
  jellyfin:
    container_name: 'jellyfin'
    image: jellyfin/jellyfin
    user: $PUID:$PGID
    group_add:
      # by id as these may not exist within the container. Needed to provide permissions to the VAAPI Devices
      - '107' #render
      - '44' #video
    # Network mode of 'host' exposes the ports on the host. This is needed for DLNA access.
    network_mode: 'host'
    volumes:
      - $DOCKERDIR/jellyfin/config:/config
      - $DOCKERDIR/jellyfin/cache:/cache
      # Update this configuration as desired
      - $MEDIADIR/media:/media
    restart: always
    devices:
      # VAAPI Devices
      # - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0
    labels:
      - 'traefik.enable=true'
      - 'traefik.http.routers.jellyfin-rtr.entryPoints=https'
      - 'traefik.http.routers.jellyfin-rtr.rule=Host(`jellyfin.$DOMAINNAME_CLOUD_SERVER`)'
      - 'traefik.http.routers.jellyfin-rtr.tls=true'
      - 'traefik.http.routers.jellyfin-rtr.middlewares=jellyfin-mw'
      - 'traefik.http.middlewares.jellyfin-mw.headers.customResponseHeaders.X-Robots-Tag=noindex,nofollow,nosnippet,noarchive,notranslate,noimageindex'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLRedirect=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLHost=jellyfin.$DOMAINNAME_CLOUD_SERVER'
      - 'traefik.http.middlewares.jellyfin-mw.headers.SSLForceHost=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSSeconds=315360000'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSIncludeSubdomains=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.STSPreload=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.forceSTSHeader=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.frameDeny=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.contentTypeNosniff=true'
      - 'traefik.http.middlewares.jellyfin-mw.headers.browserXSSFilter=true'
      - "traefik.http.middlewares.jellyfin-mw.headers.customFrameOptionsValue='allow-from https://$DOMAINNAME_CLOUD_SERVER'"
      - 'traefik.http.routers.jellyfin-rtr.service=jellyfin-svc@file'
      - 'traefik.http.services.jellyfin-svc.loadBalancer.server.port=8096'
      - 'traefik.http.services.jellyfin-svc.loadBalancer.passHostHeader=true'
      - 'traefik.http.routers.jellyfin-insecure-rtr.entryPoints=https'
      - 'traefik.http.routers.jellyfin-insecure-rtr.rule=Host(`jellyfin.$DOMAINNAME_CLOUD_SERVER`)'
      - 'traefik.http.routers.jellyfin-insecure-rtr.middlewares=jellyfin-insecure-mw'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.scheme=https'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.port=9999'
      - 'traefik.http.middlewares.jellyfin-insecure-mw.redirectscheme.permanent=false'
      - 'traefik.http.routers.jellyfin-insecure-rtr.service=noop@internal'
  # qBitTorrent - torrent client
  qbittorrent:
    container_name: qbittorrent
    image: cr.hotio.dev/hotio/qbittorrent
    networks:
      - internal
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - UMASK=002
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/qbittorrent/config:/config
      - $MEDIADIR/torrents:/data/media/torrents
      - $STORAGEDIR/torrents:/data/storage/torrents
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      ## HTTP Routers
      - "traefik.http.routers.qbit-rtr.entrypoints=https"
      - "traefik.http.routers.qbit-rtr.rule=Host(`qbit.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.qbit-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.qbit-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.qbit-rtr.service=qbit-svc"
      - "traefik.http.services.qbit-svc.loadbalancer.server.port=8080"
  # Sonarr - PVR for TV shows
  sonarr:
    container_name: sonarr
    image: cr.hotio.dev/hotio/sonarr
    networks:
      - internal
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - UMASK=002
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/sonarr/config:/config
      - $MEDIADIR:/data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      ## HTTP Routers
      - "traefik.http.routers.sonarr-rtr.entrypoints=https"
      - "traefik.http.routers.sonarr-rtr.rule=Host(`sonarr.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.sonarr-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.sonarr-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.sonarr-rtr.service=sonarr-svc"
      - "traefik.http.services.sonarr-svc.loadbalancer.server.port=8989"
  # Jackett - Indexer for torrent trackers
  jackett:
    container_name: jackett
    image: cr.hotio.dev/hotio/jackett
    networks:
      - internal
    environment:
      - PUID=$PUID
      - PGID=$PGID
      - UMASK=002
      - TZ=$TZ
    volumes:
      - $DOCKERDIR/jackett/config:/config
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=traefik_proxy"
      ## HTTP Routers
      - "traefik.http.routers.jackett-rtr.entrypoints=https"
      - "traefik.http.routers.jackett-rtr.rule=Host(`jackett.$DOMAINNAME_CLOUD_SERVER`)"
      - "traefik.http.routers.jackett-rtr.tls=true"
      ## Middlewares
      - "traefik.http.routers.jackett-rtr.middlewares=chain-oauth@file"
      ## HTTP Services
      - "traefik.http.routers.jackett-rtr.service=jackett-svc"
      - "traefik.http.services.jackett-svc.loadbalancer.server.port=9117"
